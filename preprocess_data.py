#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ data/org –≤ data/pre
"""

import os
import cv2
import numpy as np
from PIL import Image
from tqdm import tqdm
import argparse
import urllib.request


def download_face_cascade():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Haar cascade –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü"""
    cascade_path = "haarcascade_frontalface_default.xml"
    
    if not os.path.exists(cascade_path):
        print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü...")
        url = "https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml"
        urllib.request.urlretrieve(url, cascade_path)
        print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    return cascade_path


def detect_and_crop_face(image, face_cascade, output_size=112):
    """
    –î–µ—Ç–µ–∫—Ü–∏—è –∏ –∫—Ä–æ–ø –ª–∏—Ü–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–∏—Ü–∞
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30, 30),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    
    if len(faces) == 0:
        return None
    
    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ª–∏—Ü–æ
    largest_face = max(faces, key=lambda x: x[2] * x[3])
    x, y, w, h = largest_face
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫—Ä–æ–ø–∞
    padding = int(max(w, h) * 0.3)
    x1 = max(0, x - padding)
    y1 = max(0, y - padding)
    x2 = min(image.shape[1], x + w + padding)
    y2 = min(image.shape[0], y + h + padding)
    
    # –ö—Ä–æ–ø–∞–µ–º –ª–∏—Ü–æ
    face_crop = image[y1:y2, x1:x2]
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –Ω—É–∂–Ω–æ–≥–æ
    face_resized = cv2.resize(face_crop, (output_size, output_size), interpolation=cv2.INTER_LANCZOS4)
    
    return face_resized


def preprocess_image(image_path, face_cascade, output_size=112):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –ª–∏—Ü–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = cv2.imread(image_path)
        if image is None:
            return None
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –∏ –∫—Ä–æ–ø –ª–∏—Ü–∞
        face_image = detect_and_crop_face(image, face_cascade, output_size)
        
        if face_image is None:
            # –ï—Å–ª–∏ –ª–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            h, w = image_rgb.shape[:2]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            if h > w:
                new_h = output_size
                new_w = int(w * output_size / h)
            else:
                new_w = output_size
                new_h = int(h * output_size / w)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            image_resized = cv2.resize(image_rgb, (new_w, new_h), interpolation=cv2.INTER_LANCZOS4)
            
            # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∞–¥–¥–∏–Ω–≥–æ–º
            if new_h < output_size or new_w < output_size:
                padded_image = np.zeros((output_size, output_size, 3), dtype=np.uint8)
                y_offset = (output_size - new_h) // 2
                x_offset = (output_size - new_w) // 2
                padded_image[y_offset:y_offset+new_h, x_offset:x_offset+new_w] = image_resized
                return cv2.cvtColor(padded_image, cv2.COLOR_RGB2BGR)
            else:
                return cv2.cvtColor(image_resized, cv2.COLOR_RGB2BGR)
        
        return face_image
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {e}")
        return None


def preprocess_dataset(input_dir, output_dir, output_size=112, max_images=None):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –ª–∏—Ü
    """
    print(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {input_dir} –≤ {output_dir}")
    print("üîç –í–∫–ª—é—á–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü - –±—É–¥—É—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü
    cascade_path = download_face_cascade()
    face_cascade = cv2.CascadeClassifier(cascade_path)
    
    if face_cascade.empty():
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(output_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ('.jpg', '.jpeg', '.png', '.bmp')
    image_files = []
    
    for file in os.listdir(input_dir):
        if file.lower().endswith(image_extensions):
            image_files.append(file)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if max_images and len(image_files) > max_images:
        image_files = image_files[:max_images]
        print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {max_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    processed_count = 0
    faces_detected = 0
    no_face_count = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, filename in enumerate(tqdm(image_files, desc="–î–µ—Ç–µ–∫—Ü–∏—è –∏ –∫—Ä–æ–ø –ª–∏—Ü")):
        input_path = os.path.join(input_dir, filename)
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –ª–∏—Ü–∞
        processed_image = preprocess_image(input_path, face_cascade, output_size)
        
        if processed_image is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ
            temp_gray = cv2.cvtColor(processed_image, cv2.COLOR_BGR2GRAY)
            temp_faces = face_cascade.detectMultiScale(temp_gray, scaleFactor=1.1, minNeighbors=3)
            
            if len(temp_faces) > 0:
                faces_detected += 1
            else:
                no_face_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            output_filename = f"face_{i:06d}.png"
            output_path = os.path.join(output_dir, output_filename)
            
            cv2.imwrite(output_path, processed_image)
            processed_count += 1
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üë§ –õ–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω—ã –≤: {faces_detected} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    print(f"‚ùì –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {no_face_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")


def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--input_dir', type=str, default='data/org', 
                       help='–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º')
    parser.add_argument('--output_dir', type=str, default='data/pre', 
                       help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--output_size', type=int, default=112, 
                       help='–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    parser.add_argument('--max_images', type=int, default=None, 
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(args.input_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {args.input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
    preprocess_dataset(
        input_dir=args.input_dir,
        output_dir=args.output_dir,
        output_size=args.output_size,
        max_images=args.max_images
    )


if __name__ == "__main__":
    main()
